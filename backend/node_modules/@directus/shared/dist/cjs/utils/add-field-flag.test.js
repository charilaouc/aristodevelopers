"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const add_field_flag_1 = require("./add-field-flag");
describe('addFieldFlag', () => {
    it('Adds a flag to a field without meta', () => {
        const field = {
            field: 'some_field',
            type: 'string',
        };
        (0, add_field_flag_1.addFieldFlag)(field, 'cast-timestamp');
        expect(field.meta).toEqual({
            special: ['cast-timestamp'],
        });
    });
    it('Adds a flag to a field without existing flags', () => {
        const field = {
            field: 'some_field',
            type: 'string',
            meta: { special: null },
        };
        (0, add_field_flag_1.addFieldFlag)(field, 'cast-timestamp');
        expect(field.meta).toEqual({
            special: ['cast-timestamp'],
        });
    });
    it('Adds a flag to a field with existing flags', () => {
        const field = {
            field: 'some_field',
            type: 'string',
            meta: { special: ['cast-datetime'] },
        };
        (0, add_field_flag_1.addFieldFlag)(field, 'cast-timestamp');
        expect(field.meta).toEqual({
            special: ['cast-datetime', 'cast-timestamp'],
        });
    });
    it('Does not add a duplicate flag to a field with existing flags', () => {
        const field = {
            field: 'some_field',
            type: 'string',
            meta: { special: ['cast-datetime', 'cast-timestamp'] },
        };
        (0, add_field_flag_1.addFieldFlag)(field, 'cast-datetime');
        expect(field.meta).toEqual({
            special: ['cast-datetime', 'cast-timestamp'],
        });
    });
});
